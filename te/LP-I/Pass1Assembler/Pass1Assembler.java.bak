import java.util.ArrayList;
import java.util.HashMap;

public class Pass1Assembler {

    private ArrayList<SymbolTableEntry> symbolTable;
    private ArrayList<LiteralTableEntry> literalTable;
    private HashMap<String, MnemonicTableEntry> mnemonicTable;
    private ArrayList<IntermediateRepresentation> intermediateCode;
    private int locationCounter = 0;

    public static void main(String[] args) {
        Pass1Assembler assembler = new Pass1Assembler();
        String[] code = {
            "START 100",
            "MOVER AREG, '5'",
            "ADD BREG, '10'",
            "MOVEM AREG, X",
            "END"
        };

        for (String line : code) {
            assembler.processLine(line);
        }

        assembler.printSymbolTable();
        assembler.printIntermediateCode();
    }
    
    public Pass1Assembler() {
        symbolTable = new ArrayList<>();
        literalTable = new ArrayList<>();
        mnemonicTable = new HashMap<>();
        intermediateCode = new ArrayList<>();
        loadMnemonics();
    }

    private void loadMnemonics() {
        mnemonicTable.put("ADD", new MnemonicTableEntry("ADD", "01"));
        mnemonicTable.put("SUB", new MnemonicTableEntry("SUB", "02"));
        mnemonicTable.put("MOV", new MnemonicTableEntry("MOV", "03"));
        // Add more as needed
    }

    public void processLine(String line) {
        String[] tokens = line.split("\\s+");
        String label = null, opcode, operand = null;

        if (tokens.length == 3) {
            label = tokens[0];
            opcode = tokens[1];
            operand = tokens[2];
        } else if (tokens.length == 2) {
            opcode = tokens[0];
            operand = tokens[1];
        } else {
            opcode = tokens[0];
        }

        if (label != null) {
            symbolTable.add(new SymbolTableEntry(label, locationCounter));
        }

        if (mnemonicTable.containsKey(opcode)) {
            intermediateCode.add(new IntermediateRepresentation(label, opcode, operand));
            locationCounter += 1;
        } else {
            System.out.println("Error: Unknown opcode " + opcode);
        }
    }

    public void printSymbolTable() {
        System.out.println("Symbol Table:");
        for (SymbolTableEntry entry : symbolTable) {
            System.out.println("Symbol: " + entry.getSymbol() + ", Address: " + entry.getAddress());
        }
    }

    public void printIntermediateCode() {
        System.out.println("Intermediate Code:");
        for (IntermediateRepresentation ir : intermediateCode) {
            System.out.println(ir.getLabel() + " " + ir.getOpcode() + " " + ir.getOperand());
        }
    }
}

class SymbolTableEntry {
    private String symbol;
    private int address;

    public SymbolTableEntry(String symbol, int address) {
        this.symbol = symbol;
        this.address = address;
    }

    public String getSymbol() {
        return symbol;
    }

    public int getAddress() {
        return address;
    }
}

class LiteralTableEntry {
    private String literal;
    private int address;

    public LiteralTableEntry(String literal, int address) {
        this.literal = literal;
        this.address = address;
    }

    public String getLiteral() {
        return literal;
    }

    public int getAddress() {
        return address;
    }
}

class MnemonicTableEntry {
    private String mnemonic;
    private String opcode;

    public MnemonicTableEntry(String mnemonic, String opcode) {
        this.mnemonic = mnemonic;
        this.opcode = opcode;
    }

    public String getMnemonic() {
        return mnemonic;
    }

    public String getOpcode() {
        return opcode;
    }
}

class IntermediateRepresentation {
    private String label;
    private String opcode;
    private String operand;

    public IntermediateRepresentation(String label, String opcode, String operand) {
        this.label = label;
        this.opcode = opcode;
        this.operand = operand;
    }

    public String getLabel() {
        return label;
    }

    public String getOpcode() {
        return opcode;
    }

    public String getOperand() {
        return operand;
    }
}
