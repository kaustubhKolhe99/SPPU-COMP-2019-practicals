Practical no. 8. Design and Develop MongoDB Queries using CRUD operations.(Use CRUD operations)

╭─░▒▓    ~/Programming/sppu-compter-engg-practicals/te/DBMSL    master ⇡1 ?1 ▓▒░··························································································································░▒▓ ✔  11:01:51 AM  ▓▒░─╮
╰─ docker exec -it mongodb mongosh

Current Mongosh Log ID: 6732e86c27058cc745fe6910
Connecting to:          mongodb://127.0.0.1:27017/?directConnection=true&serverSelectionTimeoutMS=2000&appName=mongosh+2.3.2
Using MongoDB:          7.0.14
Using Mongosh:          2.3.2

For mongosh info see: https://www.mongodb.com/docs/mongodb-shell/

------
   The server generated these startup warnings when booting
   2024-11-12T05:31:50.815+00:00: Using the XFS filesystem is strongly recommended with the WiredTiger storage engine. See http://dochub.mongodb.org/core/prodnotes-filesystem
   2024-11-12T05:31:51.278+00:00: Access control is not enabled for the database. Read and write access to data and configuration is unrestricted
   2024-11-12T05:31:51.278+00:00: /sys/kernel/mm/transparent_hugepage/enabled is 'always'. We suggest setting it to 'never' in this binary version
   2024-11-12T05:31:51.278+00:00: vm.max_map_count is too low
------

test> show dbs;
admin    40.00 KiB
config  108.00 KiB
dlms    332.00 KiB
local    72.00 KiB

test> use newDB
switched to db newDB

newDB> db.createCollection("students");
{ ok: 1 }

newDB> show dbs;
admin    40.00 KiB
config   96.00 KiB
dlms    332.00 KiB
local    72.00 KiB
newDB    72.00 KiB

newDB> show collections
students

newDB> db.students.insert
db.students.insertMany  db.students.insertOne

newDB> db.students.insertOne({name:"John Wick", rollno:1, dept:"Computer Engineering",})
{
  acknowledged: true,
  insertedId: ObjectId('6732e91d27058cc745fe6911')
}

newDB> db.students.insertOne({name:"Taylor Swift", rollno:2, dept:"Information Technology" })
{
  acknowledged: true,
  insertedId: ObjectId('6732e97c27058cc745fe6912')
}

newDB> db.students.insertOne({name:"Max Verstappen", rollno:3, dept:"Mechanical Engineering" })
{
  acknowledged: true,
  insertedId: ObjectId('6732e99f27058cc745fe6913')
}

newDB> db.students
db.students

newDB> db.students.find({});
[
  {
    _id: ObjectId('6732e91d27058cc745fe6911'),
    name: 'John Wick',
    rollno: 1,
    dept: 'Computer Engineering'
  },
  {
    _id: ObjectId('6732e97c27058cc745fe6912'),
    name: 'Taylor Swift',
    rollno: 2,
    dept: 'Information Technology'
  },
  {
    _id: ObjectId('6732e99f27058cc745fe6913'),
    name: 'Max Verstappen',
    rollno: 3,
    dept: 'Mechanical Engineering'
  }
]

newDB> db.students.deleteOne({rollno:1})
{ acknowledged: true, deletedCount: 1 }

newDB> db.students.find({});
[
  {
    _id: ObjectId('6732e97c27058cc745fe6912'),
    name: 'Taylor Swift',
    rollno: 2,
    dept: 'Information Technology'
  },
  {
    _id: ObjectId('6732e99f27058cc745fe6913'),
    name: 'Max Verstappen',
    rollno: 3,
    dept: 'Mechanical Engineering'
  }
]

newDB> db.students.updateOne({rollno:2},{$set:{ dept:"Singer"}})
{
  acknowledged: true,
  insertedId: null,
  matchedCount: 1,
  modifiedCount: 1,
  upsertedCount: 0
}

newDB> db.students.find({});
[
  {
    _id: ObjectId('6732e97c27058cc745fe6912'),
    name: 'Taylor Swift',
    rollno: 2,
    dept: 'Singer'
  },
  {
    _id: ObjectId('6732e99f27058cc745fe6913'),
    name: 'Max Verstappen',
    rollno: 3,
    dept: 'Mechanical Engineering'
  }
]
